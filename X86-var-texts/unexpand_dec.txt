_init:
{'constant': [0]}
sub_40014f0:
{'constant': []}
_start:
{'constant': []}
deregister_tm_clones:
{'constant': [False]}
register_tm_clones:
{'constant': [0]}
__do_global_dtors_aux:
{'constant': [0, 1], 'ir_9': [69242888], 's_8': [1]}
frame_dummy:
{'constant': []}
emit_stdin_note:
{'string': ['\nWith no FILE, or when FILE is -, read standard input.\n'], 'constant': []}
emit_mandatory_arg_note:
{'string': ['\nMandatory arguments to long options are mandatory for short options too.\n'], 'constant': []}
emit_ancillary_info:
{'string': ['\n%s online help: <%s>\n', 'en_', 'Report any translation bugs to <https://translationproject.org/team/>\n', 'Full documentation <%s%s>\n', "or available locally via: info '(coreutils) %s%s'\n"], 'constant': [0, 16], 's_c8': [0], 'ir_122': [5], 'ir_128': [3], 'ir_145': []}
usage:
{'string': ['Usage: %s [OPTION]... [FILE]...\n', 'Convert blanks in each FILE to tabs, writing to standard output.\n', '  -a, --all        convert all blanks, instead of just initial blanks\n      --first-only  convert only leading sequences of blanks (overrides -a)\n  -t, --tabs=N     have tabs N characters apart instead of 8 (enables -a)\n', '      --help     display this help and exit\n', '      --version  output version information and exit\n', "Try '%s --help' for more information.\n"], 'constant': [0], 'ir_20': []}
unexpand:
{'string': ['input line is too long', 'input line is too long', 'write error', 'write error'], 'constant': [0, 1, 2, 8, 9, 10], 's_68': [0, 1, 9], 'ir_14': [0], 'ir_117': [], 'ir_277': [0, 1], 'ir_325': [1]}
main:
{'string': ['coreutils', '/usr/local/share/locale', 'coreutils', ',0123456789at:', 'unexpand', 'GNU coreutils', 'David MacKenzie', 'tab stop value is too large'], 'constant': [0, 1, 2, 8, 44, 48, 63, 97, 116, 128, 4294967165, 4294967166, 4294967295, 1844674407370955161], 's_38': [0, 1], 'ir_19': [6], 'ir_31': [0], 'ir_32': ['tabs'], 'ir_337': [1], 'ir_356': [8], 'ir_330': []}
to_uchar:
{'constant': []}
add_tab_stop:
{'constant': [0, 1, 8], 's_28': [0, 1], 'ir_17': [], 'ir_45': [0], 'ir_51': [8]}
set_extend_size:
{'string': ["'/' specifier only allowed with the last value"], 'constant': [0, 1], 'ir_14': [0]}
set_increment_size:
{'string': ["'+' specifier only allowed with the last value"], 'constant': [0, 1], 'ir_14': [0]}
parse_tab_stops:
{'string': ["'/' specifier not at start of number: %s", '0123456789', 'tab stop is too large %s', 'tab size contains invalid character(s): %s', "'+' specifier not at start of number: %s"], 'constant': [0, 1, 2, 9, 10, 43, 44, 47, 48, 255, 1844674407370955161], 's_58': [0, 1], 'ir_926': [1], 'ir_887': [0]}
validate_tab_stops:
{'string': ['tab size cannot be 0', 'tab sizes must be ascending', "'/' specifier is mutually exclusive with '+'"], 'constant': [0, 1, 3, 8], 's_28': [0, 1], 'ir_13': [0, 8], 'ir_36': [0], 'ir_27': [1]}
finalize_tab_stops:
{'constant': [0, 1, 8], 'ir_2': [0], 's_8': [0, 8]}
get_next_tab_column:
{'constant': [0, 1, 3, 8], 's_8': [0, 1], 'ir_11': [0]}
set_file_list:
{'constant': [0], 's_8': [0, 45]}
next_file:
{'string': ['%s', '%s', 'r', '%s'], 'constant': [0, 1, 8], 'ir_79': [8, 16], 's_38': [1, 8, 16], 'ir_269': [341], 'ir_42': [0], 'ir_24': [3], 'ir_247': [2], 'ir_248': []}
cleanup_file_list_stdin:
{'constant': [0], 'ir_7': [], 'ir_21': [1]}
emit_tab_list_info:
{'string': ['  -t, --tabs=LIST  use comma separated list of tab positions\n', "                     The last specified position can be prefixed with '/'\n                     to specify a tab size to use after the last\n                     explicitly specified tab stop.  Also a prefix of '+'\n                     can be used to align remaining tab stops relative to\n                     the last specified tab stop instead of the first column\n"], 'constant': []}
close_stdout_set_file_name:
{'constant': []}
close_stdout_set_ignore_EPIPE:
{'constant': []}
close_stdout:
{'string': ['write error', '%s: %s', '%s'], 'constant': [0, 1, 32], 'ir_9': [], 'ir_84': [1], 'ir_44': [0]}
fdadvise:
{'constant': []}
fadvise:
{'constant': [0]}
set_program_name:
{'string': ['/.libs/', 'lt-'], 'constant': [0, 3, 6, 7], 'ir_79': [], 'ir_80': [55], 'ir_81': [1], 'ir_11': [47], 'ir_27': [0], 'ir_42': [7], 'ir_59': [3]}
clone_quoting_options:
{'constant': [0], 'ir_16': [56]}
get_quoting_style:
{'constant': [0]}
set_quoting_style:
{'constant': [0]}
set_char_quoting:
{'constant': [0, 1, 4, 5, 8, 31]}
set_quoting_flags:
{'constant': [0]}
set_custom_quoting:
{'constant': [0, 10], 's_28': [10]}
quoting_options_from_style:
{'constant': [0, 10], 's_58': [0]}
gettext_quote:
{'string': ['UTF-8', 'GB18030'], 'constant': [0, 9, 96]}
quotearg_buffer:
{'constant': [0]}
quotearg_alloc:
{'constant': [], 'ir_13': [0]}
quotearg_alloc_mem:
{'constant': [0, 1], 's_58': [0]}
quotearg_free:
{'constant': [1, 16, 256], 's_18': [1, 2, 3, 256], 'ir_17': [16, 32], 'ir_24': [0]}
quotearg_n_options:
{'constant': [0, 1, 8, 16, 2147483646], 's_58': [1, 256], 'ir_48': [0], 'ir_80': [16]}
quotearg_n:
{'constant': []}
quotearg_n_mem:
{'constant': []}
quotearg:
{'constant': [], 'ir_9': [0]}
quotearg_mem:
{'constant': [], 'ir_11': [0]}
quotearg_n_style:
{'constant': [], 'ir_27': [0]}
quotearg_n_style_mem:
{'constant': [], 'ir_27': [0]}
quotearg_style:
{'constant': [], 'ir_11': [0]}
quotearg_style_mem:
{'constant': [], 'ir_13': [0]}
quotearg_char_mem:
{'constant': [], 's_68': [0], 'ir_25': [1]}
quotearg_char:
{'constant': []}
quotearg_colon:
{'constant': [], 'ir_8': [58]}
quotearg_colon_mem:
{'constant': [], 'ir_10': [58]}
quotearg_n_style_colon:
{'constant': [], 'ir_28': [1], 'ir_29': [58], 'ir_39': [0]}
quotearg_n_custom:
{'constant': []}
quotearg_n_custom_mem:
{'constant': [], 's_78': [0]}
quotearg_custom:
{'constant': [], 'ir_13': [0]}
quotearg_custom_mem:
{'constant': [], 'ir_16': [0]}
quote_n_mem:
{'constant': []}
quote_mem:
{'constant': [], 'ir_11': [0]}
quote_n:
{'constant': []}
quote:
{'constant': [], 'ir_9': [0]}
version_etc_arn:
{'string': ['%s (%s) %s\n', '%s %s\n', '(C)', 'Copyright %s %d Free Software Foundation, Inc.', 'License GPLv3+: GNU GPL version 3 or later <%s>.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n', 'Written by %s.\n', 'Written by %s and %s.\n', 'Written by %s, %s, and %s.\n', 'Written by %s, %s, %s,\nand %s.\n', 'Written by %s, %s, %s,\n%s, and %s.\n', 'Written by %s, %s, %s,\n%s, %s, and %s.\n', 'Written by %s, %s, %s,\n%s, %s, %s, and %s.\n', 'Written by %s, %s, %s,\n%s, %s, %s, %s,\nand %s.\n', 'Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, and %s.\n', 'Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n'], 'constant': [0, 4], 'ir_52': [2020], 'ir_59': [10]}
version_etc_ar:
{'constant': [0, 1, 3], 's_48': [0, 1, 2], 'ir_12': [0, 8, 16], 'ir_70': [0, 1]}
version_etc_va:
{'constant': [0, 1, 8, 9, 47], 's_a8': [0, 1], 'ir_147': [0], 'ir_148': []}
version_etc:
{'constant': [0], 's_f8': [32, 48], 'ir_37': []}
emit_bug_reporting_address:
{'string': ['Report bugs to: %s\n', '%s home page: <%s>\n', 'General help using GNU software: <%s>\n'], 'constant': [], 'ir_4': [10]}
xnmalloc:
{'constant': [0, 1], 'ir_8': [0], 'ir_16': [1]}
xnrealloc:
{'constant': [0, 1], 'ir_9': [0], 'ir_17': [1]}
x2nrealloc:
{'constant': [0, 1, 128], 'ir_57': [0], 'ir_65': [1]}
xcharalloc:
{'constant': []}
xmalloc:
{'constant': [0]}
xrealloc:
{'constant': [0]}
x2realloc:
{'constant': [], 'ir_10': [1]}
xzalloc:
{'constant': [], 'ir_8': [1]}
xcalloc:
{'constant': [0, 1], 'ir_8': [0], 'ir_16': [1]}
xmemdup:
{'constant': []}
xstrdup:
{'constant': [1]}
xalloc_die:
{'string': ['memory exhausted', '%s'], 'constant': [], 'ir_9': [0], 'ir_10': [1]}
xstrndup:
{'constant': [0]}
rpl_fclose:
{'constant': [0, 4294967295, 18446744073709551615], 's_28': [0], 'ir_22': [1]}
clear_ungetc_buffer_preserving_position:
{'constant': [0, 256], 'ir_17': [1], 'ir_18': [0]}
rpl_fflush:
{'constant': [0]}
rpl_fseeko:
{'constant': [0, 4294967279, 4294967295, 18446744073709551615]}
rpl_mbrtowc:
{'constant': [0, 1, 255, 18446744073709551613], 's_48': [], 'ir_56': [0]}
c_strcasecmp:
{'constant': [0]}
close_stream:
{'constant': [0, 1, 9, 4294967295], 's_28': [0]}
hard_locale:
{'string': ['C', 'POSIX', 'POSIX'], 'constant': [0, 1], 's_128': [], 'ir_15': [257], 'ir_55': [0]}
locale_charset:
{'constant': [0], 'ir_6': [14]}
setlocale_null_androidfix:
{'constant': [], 'ir_8': [0]}
setlocale_null_unlocked:
{'constant': [0, 1, 22, 34], 's_38': [0]}
setlocale_null_r:
{'constant': []}
setlocale_null:
{'constant': []}
c_isalnum:
{'constant': [0, 1, 9, 25, 48, 65, 90, 97]}
c_isalpha:
{'constant': [0, 1, 25, 65, 90, 97]}
c_isascii:
{'constant': [0, 1, 127]}
c_isblank:
{'constant': [0, 1, 9, 32]}
c_iscntrl:
{'constant': [0, 1, 31, 127]}
c_isdigit:
{'constant': [0, 1, 9, 48]}
c_isgraph:
{'constant': [0, 1, 33, 93]}
c_islower:
{'constant': [0, 1, 25, 97]}
c_isprint:
{'constant': [0, 1, 32, 94]}
c_ispunct:
{'constant': [0, 1, 3, 14, 33, 58, 64, 91, 96, 123]}
c_isspace:
{'constant': [0, 1, 9, 13, 32]}
c_isupper:
{'constant': [0, 1, 25, 65]}
c_isxdigit:
{'constant': [0, 1, 4, 48, 54]}
c_tolower:
{'constant': [25, 65]}
c_toupper:
{'constant': [25, 97]}
__libc_csu_init:
{'constant': [0, 1, 8]}
__libc_csu_fini:
{'constant': []}
atexit:
{'constant': [], 'ir_0': [69242888], 'ir_4': [0]}
_fini:
{'constant': []}
