_init:
{'constant': []}
main:
{'string': ['coreutils', '/usr/local/share/locale', 'coreutils', 'write error', 'input line is too long', 'input line is too long', 'tab stop value is too large'], 'constant': [0, 1, 8, 9, 10, 31, 44, 48, 63, 429496729], 'ir_15': [6], 'ir_31': ['tabs'], 's_58': [0, 1, 9], 'ir_683': [1], 'ir_89': [-1717986919], 'ir_90': [], 'ir_161': [0], 'ir_127': [5], 'ir_372': [-72540024], 'ir_255': [9]}
_start:
{'constant': []}
sub_94ec:
{'constant': []}
call_weak_fn:
{'constant': [], 'ir_0': [1], 'ir_1': [0]}
__do_global_dtors_aux:
{'constant': [0, 1], 'ir_1': [1]}
frame_dummy:
{'constant': [], 'ir_3': [0]}
set_extend_size:
{'string': ["'/' specifier only allowed with the last value"], 'constant': [0, 4], 'ir_7': [0], 'ir_18': [1], 'ir_22': [5]}
set_increment_size:
{'string': ["'+' specifier only allowed with the last value"], 'constant': [0, 4, 8], 'ir_7': [0], 'ir_18': [1], 'ir_22': [5]}
add_tab_stop:
{'string': ['tabs are too far apart'], 'constant': [-1, 0, 1, 3, 4, 8, 16, 32, 64, 178956969], 'ir_16': [0], 's_20': [1, 8], 'ir_98': [64], 'ir_68': [-1], 'ir_133': [1], 'ir_85': [5], 'ir_160': [8, 64]}
parse_tab_stops:
{'string': ["'/' specifier not at start of number: %s", "'+' specifier not at start of number: %s", '0123456789', 'tab stop is too large %s', '0123456789', 'tab size contains invalid character(s): %s'], 'constant': [0, 1, 9, 10, 31, 43, 44, 47, 48, 429496729], 'ir_16': [1], 'ir_17': [0], 'ir_229': [5], 'ir_121': [-1717986919], 'ir_122': [], 's_20': [0, 1, 8]}
finalize_tab_stops:
{'constant': [0, 1, 4, 8, 32], 'ir_76': [0], 'ir_181': [5], 'ir_126': [8], 's_18': [0, 8], 'ir_186': [1]}
sub_9e28:
{'constant': []}
get_next_tab_column:
{'constant': [0, 1, 2, 3, 8], 'ir_21': [0], 's_20': [0, 1]}
next_file:
{'string': ['%s', '%s', '%s'], 'constant': [0, 1, 4, 32, 40, 44, 45, 48, 52], 'ir_83': [4], 's_18': [1, 4, 8], 'ir_184': [341], 'ir_24': [0], 'ir_25': [3], 'ir_167': [], 'ir_168': [2], 'ir_34': [1], 'ir_142': [8]}
cleanup_file_list_stdin:
{'string': ['  -t, --tabs=LIST  use comma separated list of tab positions\n'], 'constant': [], 'ir_2': [0], 'ir_9': [-72540024], 'ir_20': [1], 'ir_28': [5]}
emit_tab_list_info:
{'string': ['  -t, --tabs=LIST  use comma separated list of tab positions\n', "                     The last specified position can be prefixed with '/'\n                     to specify a tab size to use after the last\n                     explicitly specified tab stop.  Also a prefix of '+'\n                     can be used to align remaining tab stops relative to\n                     the last specified tab stop instead of the first column\n"], 'constant': [], 'ir_3': [5], 'ir_5': [0]}
close_stdout_set_file_name:
{'constant': []}
close_stdout_set_ignore_EPIPE:
{'constant': [4]}
close_stdout:
{'string': ['write error', '%s: %s', '%s'], 'constant': [0], 'ir_4': [-72540024], 'ir_5': [], 'ir_48': [5], 'ir_75': [1]}
fdadvise:
{'constant': []}
fadvise:
{'constant': [0]}
set_program_name:
{'string': ['/.libs/', 'lt-'], 'constant': [0, 1, 4, 6], 'ir_59': [1], 'ir_60': [55], 'ir_58': [], 'ir_10': [47], 'ir_54': ['./pr'], 'ir_30': [7], 'ir_41': [3]}
sub_a398:
{'constant': []}
quoting_options_from_style:
{'constant': [0, 4, 10], 'ir_2': [0]}
quotearg_n_options:
{'constant': [0, 1, 3, 4], 'ir_23': [1], 'ir_43': [0], 'ir_46': [256]}
clone_quoting_options:
{'constant': [0], 'ir_13': [48]}
get_quoting_style:
{'constant': [0]}
set_char_quoting:
{'constant': [0, 1, 2, 5, 31, 32, 255]}
set_quoting_flags:
{'constant': [0, 4]}
quotearg_buffer:
{'constant': []}
quotearg_alloc_mem:
{'constant': [0, 1], 'ir_34': [0]}
quotearg_alloc:
{'constant': [], 'ir_2': [0]}
quotearg_free:
{'constant': [1, 2, 4, 8, 12, 256], 'ir_15': [0], 'ir_54': [1], 's_18': [1, 256], 'ir_44': [256]}
quotearg_n:
{'constant': [], 'ir_1': [-1]}
quotearg_n_mem:
{'constant': []}
quotearg:
{'constant': [], 'ir_2': [0]}
quotearg_mem:
{'constant': [], 'ir_4': [0]}
quotearg_n_style:
{'constant': [], 'ir_11': [-1]}
quotearg_n_style_mem:
{'constant': []}
quotearg_style:
{'constant': [], 'ir_4': [0]}
quotearg_style_mem:
{'constant': [], 'ir_7': [0]}
quotearg_char_mem:
{'constant': [2, 5, 31, 32, 48, 255], 's_40': [0], 'ir_40': []}
quotearg_char:
{'constant': [], 'ir_2': [-1]}
quotearg_colon:
{'constant': [], 'ir_0': [58]}
quotearg_colon_mem:
{'constant': [], 'ir_0': [58]}
quotearg_n_style_colon:
{'constant': [], 'ir_34': [-1]}
quotearg_n_custom_mem:
{'constant': [], 's_48': [0]}
quotearg_n_custom:
{'constant': [], 's_10': [-1]}
quotearg_custom:
{'constant': [], 'ir_7': [0]}
quotearg_custom_mem:
{'constant': [], 'ir_12': [0]}
quote_n_mem:
{'constant': []}
quote_mem:
{'constant': [], 'ir_4': [0]}
quote_n:
{'constant': [], 'ir_0': [-1]}
quote:
{'constant': [], 'ir_2': [0]}
version_etc_arn:
{'string': ['(C)', 'License GPLv3+: GNU GPL version 3 or later <%s>.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n', 'Written by %s, %s, %s,\n%s, %s, %s, and %s.\n', 'Written by %s, %s, %s,\nand %s.\n', 'Written by %s, %s, %s,\n%s, %s, and %s.\n', 'Written by %s, %s, %s,\n%s, and %s.\n', 'Written by %s, %s, %s,\n%s, %s, %s, %s,\nand %s.\n', 'Written by %s and %s.\n', 'Written by %s.\n', 'Written by %s, %s, and %s.\n'], 'constant': [0, 9], 'ir_22': [1], 'ir_29': [5], 'ir_30': [0], 's_40': [2020], 'ir_39': [10]}
version_etc_ar:
{'constant': [0, 1, 4], 's_18': [1, 2]}
version_etc_va:
{'constant': [0, 1, 4], 's_40': [1]}
version_etc:
{'constant': []}
emit_bug_reporting_address:
{'string': ['Report bugs to: %s\n', '%s home page: <%s>\n', 'General help using GNU software: <%s>\n'], 'constant': [], 'ir_2': [-72540024], 'ir_3': [10], 'ir_7': [5], 'ir_8': [0], 'ir_12': [1]}
xmalloc:
{'constant': []}
xcharalloc:
{'constant': []}
xnmalloc:
{'constant': []}
xrealloc:
{'constant': [0, 1], 'ir_39': [0]}
x2nrealloc:
{'constant': [0, 1], 'ir_17': [], 'ir_30': [64]}
xnrealloc:
{'constant': []}
x2realloc:
{'constant': [0, 1, 64, 'SUUU']}
xcalloc:
{'constant': [], 'ir_15': [1]}
xzalloc:
{'constant': [], 'ir_0': [1]}
xmemdup:
{'constant': []}
xstrdup:
{'constant': []}
xalloc_die:
{'string': ['memory exhausted', '%s'], 'constant': [], 'ir_4': [5], 'ir_5': [0], 'ir_11': [1]}
xstrndup:
{'constant': []}
rpl_fflush:
{'constant': [0, 256], 'ir_23': [1], 'ir_25': [0]}
rpl_fseeko:
{'constant': [-17, -1, 0, 4, 80], 'ir_37': [-1]}
process_long_option:
{'string': ["%s: option '%s%s' is ambiguous; possibilities:", "%s: option '%s%s' is ambiguous\n", "%s: option '%s%s' doesn't allow an argument\n", "%s: option '%s%s' requires an argument\n", "%s: unrecognized option '%s%s'\n"], 'constant': [-1, 0, 1, 2, 16, 45, 61], 'ir_492': [0], 's_58': [-1, 0, 1], 'ir_495': [63], 'ir_475': [-72540024], 'ir_477': [5], 'ir_487': [1], 'ir_488': [], 'ir_135': [-1], 'ir_367': [10]}
_getopt_internal_r:
{'string': ['POSIXLY_CORRECT', "%s: option requires an argument -- '%c'\n", "%s: option requires an argument -- '%c'\n", "%s: invalid option -- '%c'\n"], 'constant': [-1, 0, 1, 2, 4, 43, 45, 58, 59, 63, 87], 'ir_587': [-1], 'ir_23': [0], 's_40': [0, 1, 2], 'ir_148': [1], 'ir_561': [63], 'ir_545': [-72540024], 'ir_547': [5], 'ir_200': [0, 1], 'ir_554': []}
rpl_getopt_internal:
{'constant': [4, 8], 's_20': [0, 1], 'ir_12': [0]}
rpl_getopt:
{'constant': [], 'ir_2': [0], 's_18': [0, 1]}
rpl_getopt_long:
{'constant': [], 's_18': [0]}
_getopt_long_r:
{'constant': [], 's_18': [0]}
rpl_getopt_long_only:
{'constant': [], 's_18': [0, 1]}
_getopt_long_only_r:
{'constant': [], 's_18': [0, 1]}
rpl_mbrtowc:
{'constant': [-2, 0, 1], 'ir_24': [1], 'ir_34': [], 'ir_50': [0]}
hard_locale:
{'string': ['POSIX'], 'constant': [0, 1, 67], 'ir_1': [], 'ir_2': [257]}
setlocale_null:
{'constant': [], 'ir_0': [0]}
rpl_nl_langinfo:
{'constant': []}
__aeabi_uidivmod:
{'constant': []}
__aeabi_uldivmod:
{'constant': [0], 's_10': []}
__aeabi_idiv0:
{'constant': [], 'ir_2': [8]}
__gnu_ldivmod_helper:
{'constant': []}
__gnu_uldivmod_helper:
{'constant': []}
__libc_csu_init:
{'constant': [0, 1, 4], 'ir_37': [0]}
__libc_csu_fini:
{'constant': []}
atexit:
{'constant': [], 'ir_0': [1], 'ir_4': [0]}
_fini:
{'constant': []}
