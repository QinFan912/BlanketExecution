date@_init	0	20	4	-65544	8	
date@sub_40026f0	
date@_start	-65528	20	-65536	0	
date@deregister_tm_clones	0	8	20	
date@register_tm_clones	0	36	20	
date@__do_global_dtors_aux	0	5	8	69337096	1	
date@frame_dummy	
date@emit_mandatory_arg_note	
Mandatory arguments to long options are mandatory for short options too.
	8	-65552	4	-65560	
date@emit_ancillary_info	
%s online help: <%s>
	en_	Report any translation bugs to <https://translationproject.org/team/>
	Full documentation <%s%s>
	or available locally via: info '(coreutils) %s%s'
	0	-65688	-65672	-65656	0	19	-65688	20	5	8	3	4	-65736	184	
date@timetostr	8	-65544	16	
date@bad_cast	
date@usage	Usage: %s [OPTION]... [+FORMAT]
  or:  %s [-u|--utc|--universal] [MMDDhhmm[[CC]YY][.ss]]
	Display the current time in the given FORMAT, or set the system date.
	  -d, --date=STRING          display time described by STRING, not 'now'
	      --debug                annotate the parsed date,
                              and warn about questionable usage to stderr
	  -f, --file=DATEFILE        like --date; once for each line of DATEFILE
	  -I[FMT], --iso-8601[=FMT]  output date/time in ISO 8601 format.
                               FMT='date' for date only (the default),
                               'hours', 'minutes', 'seconds', or 'ns'
                               for date and time to the indicated precision.
                               Example: 2006-08-14T02:34:56-06:00
	  -R, --rfc-email            output date and time in RFC 5322 format.
                               Example: Mon, 14 Aug 2006 02:34:56 -0600
	      --rfc-3339=FMT         output date/time in RFC 3339 format.
                               FMT='date', 'seconds', or 'ns'
                               for date and time to the indicated precision.
                               Example: 2006-08-14 02:34:56-06:00
	  -r, --reference=FILE       display the last modification time of FILE
	  -s, --set=STRING           set time described by STRING
  -u, --utc, --universal     print or set Coordinated Universal Time (UTC)
	      --help     display this help and exit
	      --version  output version information and exit
	
FORMAT controls the output.  Interpreted sequences are:

  %%   a literal %
  %a   locale's abbreviated weekday name (e.g., Sun)
	  %A   locale's full weekday name (e.g., Sunday)
  %b   locale's abbreviated month name (e.g., Jan)
  %B   locale's full month name (e.g., January)
  %c   locale's date and time (e.g., Thu Mar  3 23:05:25 2005)
	  %C   century; like %Y, except omit last two digits (e.g., 20)
  %d   day of month (e.g., 01)
  %D   date; same as %m/%d/%y
  %e   day of month, space padded; same as %_d
	  %F   full date; like %+4Y-%m-%d
  %g   last two digits of year of ISO week number (see %G)
  %G   year of ISO week number (see %V); normally useful only with %V
	  %h   same as %b
  %H   hour (00..23)
  %I   hour (01..12)
  %j   day of year (001..366)
	  %k   hour, space padded ( 0..23); same as %_H
  %l   hour, space padded ( 1..12); same as %_I
  %m   month (01..12)
  %M   minute (00..59)
	  %n   a newline
  %N   nanoseconds (000000000..999999999)
  %p   locale's equivalent of either AM or PM; blank if not known
  %P   like %p, but lower case
  %q   quarter of year (1..4)
  %r   locale's 12-hour clock time (e.g., 11:11:04 PM)
  %R   24-hour hour and minute; same as %H:%M
  %s   seconds since 1970-01-01 00:00:00 UTC
	  %S   second (00..60)
  %t   a tab
  %T   time; same as %H:%M:%S
  %u   day of week (1..7); 1 is Monday
	  %U   week number of year, with Sunday as first day of week (00..53)
  %V   ISO week number, with Monday as first day of week (01..53)
  %w   day of week (0..6); 0 is Sunday
  %W   week number of year, with Monday as first day of week (00..53)
	  %x   locale's date representation (e.g., 12/31/99)
  %X   locale's time representation (e.g., 23:13:48)
  %y   last two digits of year (00..99)
  %Y   year
	  %z   +hhmm numeric time zone (e.g., -0400)
  %:z  +hh:mm numeric time zone (e.g., -04:00)
  %::z  +hh:mm:ss numeric time zone (e.g., -04:00:00)
  %:::z  numeric time zone with : to necessary precision (e.g., -04, +05:30)
  %Z   alphabetic time zone abbreviation (e.g., EDT)

By default, date pads numeric fields with zeroes.
	The following optional flags may follow '%':

  -  (hyphen) do not pad the field
  _  (underscore) pad with spaces
  0  (zero) pad with zeros
  +  pad with zeros, and put '+' before future years with >4 digits
  ^  use upper case if possible
  #  use opposite case if possible
	
After any flags comes an optional field width, as a decimal number;
then an optional modifier, which is either
E to use the locale's alternate representations if available, or
O to use the locale's alternate numeric symbols if available.
	
Examples:
Convert seconds since the epoch (1970-01-01 UTC) to a date
  $ date --date='@2147483647'

Show the time on the west coast of the US (use tzselect(1) to find TZ)
  $ TZ='America/Los_Angeles' date

Show the local time for 9AM next Friday on the west coast of the US
  $ date --date='TZ="America/Los_Angeles" 09:00 next Fri'
	Try '%s --help' for more information.
	0	7	
date@batch_convert	-	r	%s	standard input	invalid date %s	%s	-1	0	10	0	1	19	0	8	-65616	-65624	3	-65592	1	7	-1	17	5	10	20	4	-65672	120	
date@main	coreutils	/usr/local/share/locale	coreutils	d:f:I::r:Rs:u	--rfc-3339	--iso-8601	date	GNU coreutils	David MacKenzie	multiple output formats specified	the options to print and set the time may not be used together	extra operand %s	multiple output formats specified	the argument %s lacks a leading '+';
when using an option to specify date(s), any non-option
argument must be a format string beginning with '+'	TZ	%s	invalid date %s	cannot set date	cannot set date	the options to specify dates for printing are mutually exclusive	-131	-130	-1	0	4	8	32	43	73	82	100	102	114	115	117	128	129	-65720	0	1	2	19	0	6	date	7	-1	1	102	5	8	73	117	2	20	131180	43	16	4	-131	82	114	128	hour	17	-130	100	115	129	-65720	-65736	-65848	296	3	
date@show_date	C	time %s is out of range	0	19	-65656	-65688	20	-65592	8	2	10	1	4	136	
date@__argmatch_die	1	
date@sub_4003ef5	
date@argmatch	0	8	8	-65544	64	-1	0	1	2	0	8	16	20	0	5	4	-1	19	-2	0	1	52	
date@argmatch_invalid	invalid argument %s for %s	ambiguous argument %s for %s	-1	8	1	0	4	-65608	56	
date@argmatch_valid	Valid arguments are:	, %s	
  - %s	0	8	8	-65552	56	0	1	20	0	10	4	-65608	52	19	
date@__xargmatch_internal	8	-65544	64	0	
date@argmatch_to_argument	0	8	8	-65544	48	0	1	2	0	8	16	20	0	52	0	1	19	4	
date@close_stdout_set_file_name	
date@close_stdout_set_ignore_EPIPE	
date@close_stdout	write error	%s: %s	%s	0	32	8	-65552	24	19	0	1	17	4	-65576	20	7	32	
date@fwrite_lowcase	0	1	8	-65544	32	20	0	
date@fwrite_uppcase	0	1	8	-65544	32	20	0	
date@iso_week_days	3	
date@fprintftime	0	8	-65608	-65553	-1	20	
date@gettime	8	-65544	16	0	
date@current_timespec	19	0	-65576	20	
date@imaxtostr	2	10	63	0	45	8	0	1	
date@time_overflow	0	
date@to_uchar	
date@dbg_printf	0	17	-65720	-65528	8	48	19	6	1	-65752	20	
date@digits_to_date_time	0	2	4	100	20	0	8	4	2	17	0	1	2	
date@apply_relative_time	0	7	3	1	8	4	19	17	
date@set_hhmmss	
date@str_days	%s	%ld	-1	0	6	12	17	0	19	8	-1	7	6	12	4	1	
date@debug_print_current_time	parsed %s part: 	(Y-M-D) %04ld-%02ld-%02ld	year: %04ld	.%09d	%s (day ordinal=%ld number=%d)	number of seconds: %ld	0	0	1	17	20	4	-65736	168	5	32	1	-65688	100	7	10	2	19	
date@print_rel_part	0	8	19	1	
date@debug_print_relative_time	parsed %s part: 	today/this/now
	0	17	4	-65592	40	20	19	10	
date@yydestruct	0	8	
